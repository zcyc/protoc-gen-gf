// Code generated by protoc-gen-gf-controller. DO NOT EDIT.
// versions:
// - protoc-gen-gf-controller v0.0.1
// - protoc                   v3.19.4
// source: v1/article.proto

package v1

// This is a compile-time assertion to ensure that this generated file
// is compatible with the goframe package it is being compiled against.

import (
	"context"
	"errors"

	"github.com/gogf/gf/v2/errors/gcode"
	"github.com/gogf/gf/v2/frame/g"
	"github.com/gogf/gf/v2/net/ghttp"
)

var (
	Blog = cBlog{}
)

type cBlog struct{}

func (c *cBlog) GetArticles(ctx context.Context, req *v1.GetArticlesReq) (res *v1.GetArticlesRes, err error) {
	// 调用 service 处理请求
	r, err := service.Blog().GetArticles(ctx, &model.GetArticlesInput{

		Title: req.Title,

		Page: req.Page,

		PageSize: req.PageSize,

		AuthorId: req.AuthorId,
	})

	// 返回错误消息
	if err != nil {
		return nil, gerror.NewCode(gcode.CodeInternalError, err.Error())
	}

	// 返回成功信息
	g.RequestFromCtx(ctx).Response.WriteJson(&ghttp.DefaultHandlerResponse{
		Code:    gcode.CodeOK.Code(),
		Message: "succeed",
		Data:    r,
	})
	return
}

func (c *cBlog) CreateArticle(ctx context.Context, req *v1.CreateArticleReq) (res *v1.CreateArticleRes, err error) {
	// 调用 service 处理请求
	r, err := service.Blog().CreateArticle(ctx, &model.CreateArticleInput{

		Title: req.Title,

		Content: req.Content,

		AuthorId: req.AuthorId,
	})

	// 返回错误消息
	if err != nil {
		return nil, gerror.NewCode(gcode.CodeInternalError, err.Error())
	}

	// 返回成功信息
	g.RequestFromCtx(ctx).Response.WriteJson(&ghttp.DefaultHandlerResponse{
		Code:    gcode.CodeOK.Code(),
		Message: "succeed",
		Data:    r,
	})
	return
}
